import React, { useState, useEffect, useMemo } from 'react';
import { Card } from './components/ui/card';
import { Button } from './components/ui/button';
import { Input } from './components/ui/input';

const ARTIFACTS_PER_PAGE = 20;

function App() {
  const [allArtifacts, setAllArtifacts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [currentPage, setCurrentPage] = useState(1);

  const [selectedArtifact, setSelectedArtifact] = useState(null);
  const [ArtifactComponent, setArtifactComponent] = useState(null);

  useEffect(() => {
    const loadArtifacts = async () => {
      setIsLoading(true);
      try {
        const response = await fetch('/claude_artifacts_manifest.json');
        if (!response.ok) {
          throw new Error("Failed to fetch manifest. Run the 'scan' command.");
        }
        const data = await response.json();
        setAllArtifacts(data);
      } catch (error) {
        console.error("Error loading artifact manifest:", error);
        setAllArtifacts([]);
      } finally {
        setIsLoading(false);
      }
    };
    loadArtifacts();
  }, []);

  const filteredArtifacts = useMemo(() => {
    if (!searchQuery) {
      return allArtifacts;
    }
    return allArtifacts.filter(artifact =>
      artifact.name.toLowerCase().includes(searchQuery.toLowerCase())
    );
  }, [allArtifacts, searchQuery]);

  const totalPages = Math.ceil(filteredArtifacts.length / ARTIFACTS_PER_PAGE);

  const paginatedArtifacts = useMemo(() => {
    const startIndex = (currentPage - 1) * ARTIFACTS_PER_PAGE;
    const endIndex = startIndex + ARTIFACTS_PER_PAGE;
    return filteredArtifacts.slice(startIndex, endIndex);
  }, [filteredArtifacts, currentPage]);

  useEffect(() => {
    // Reset to page 1 whenever the filter changes
    setCurrentPage(1);
  }, [searchQuery]);

  useEffect(() => {
    if (selectedArtifact && selectedArtifact.path) {
      const loadComponent = async () => {
        try {
          const componentModule = await import(`../${selectedArtifact.path}`);
          setArtifactComponent(() => componentModule.default);
        } catch (error) {
          console.error(`Error loading artifact component from path: ../${selectedArtifact.path}`, error);
          setArtifactComponent(() => () => <div>Error loading component. Check console.</div>);
        }
      };
      loadComponent();
    } else {
      setArtifactComponent(null);
    }
  }, [selectedArtifact]);

  const handleNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1);
    }
  };

  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold">Claude Artifacts Viewer</h1>
        <div className="w-1/3">
          <Input
            type="text"
            placeholder="Search artifacts..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
      </div>

      {isLoading ? (
        <div className="text-center py-10">
          <p>Loading artifacts...</p>
        </div>
      ) : allArtifacts.length > 0 ? (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {paginatedArtifacts.map((artifact) => (
              <Card
                key={artifact.id}
                className="p-4 cursor-pointer hover:shadow-lg transition-shadow"
                onClick={() => setSelectedArtifact(artifact)}
              >
                <h2 className="text-xl font-semibold">{artifact.name}</h2>
              </Card>
            ))}
          </div>

          {totalPages > 1 && (
            <div className="flex items-center justify-center space-x-4 mt-6">
              <Button onClick={handlePrevPage} disabled={currentPage <= 1}>
                Previous
              </Button>
              <span>
                Page {currentPage} of {totalPages}
              </span>
              <Button onClick={handleNextPage} disabled={currentPage >= totalPages}>
                Next
              </Button>
            </div>
          )}
        </>
      ) : (
        <div className="text-center py-10">
            <p>No artifacts found.</p>
            <p className="text-sm text-gray-500 mt-2">Try adding some artifacts to the `claude_artifacts` directory and running the `scan` command.</p>
        </div>
      )}

      {selectedArtifact && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
          <div className="bg-white p-6 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-2xl font-bold">{selectedArtifact.name}</h2>
              <button
                className="text-gray-500 hover:text-gray-700 text-2xl"
                onClick={() => setSelectedArtifact(null)}
              >
                &times;
              </button>
            </div>
            <div id="artifact-component-container">
              {ArtifactComponent ? <ArtifactComponent /> : <p>Loading component...</p>}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default App;
